require "concurrent"

module Aws::S3
  class Bucket
    def objects(options = {})
      batches =
        Enumerator.new do |y|
          options = options.merge(bucket: @name)
          begin
            resp = @client.list_objects_v2(options)
            resp.each_page do |page|
              batch = []
              pool = Concurrent::FixedThreadPool.new(16)
              mutex = Mutex.new
              page.data.contents.each do |c|
                pool.post do
                  begin
                    mutex.synchronize do
                      batch << ObjectSummary.new(
                        bucket_name: @name,
                        key: c.key,
                        data: c,
                        client: @client
                      )
                    end
                  rescue Aws::S3::Errors::PermanentRedirect => e
                    Inspec::Log.warn "Permanent redirect for object #{c.key}: #{e.message}"
                  rescue => e
                    Inspec::Log.warn "Error processing object #{c.key}: #{e.message}"
                    Inspec::Log.warn "Backtrace: #{e.backtrace.join("\n")}"
                  end
                end
              end
              pool.shutdown
              pool.wait_for_termination
              y.yield(batch)
            end
          rescue Aws::S3::Errors::PermanentRedirect => e
            Inspec::Log.warn "Permanent redirect for bucket #{@name}: #{e.message}"
          rescue => e
            Inspec::Log.warn "Error accessing bucket #{@name}: #{e.message}"
            Inspec::Log.warn "Backtrace: #{e.backtrace.join("\n")}"
          end
        end
      ObjectSummary::Collection.new(batches)
    end
  end
end

def get_public_objects(myBucket)
  myPublicKeys = []
  s3 = Aws::S3::Resource.new
  pool = Concurrent::FixedThreadPool.new(56)
  mutex = Mutex.new

  begin
    bucket = s3.bucket(myBucket)
    object_count = bucket.objects.count

    if Inspec::Log.level == :debug
      Inspec::Log.debug "### Processing Bucket ### : #{myBucket} with #{object_count} objects"
    end

    # Check if the bucket has no objects
    return myPublicKeys if object_count.zero?

    bucket.objects.each do |object|
      if Inspec::Log.level == :debug
        Inspec::Log.debug "    Examining Key: #{object.key}"
      end
      pool.post do
        begin
          grants = object.acl.grants
          if grants.map { |x| x.grantee.type }.any? { |x| x =~ /Group/ } &&
               grants
                 .map { |x| x.grantee.uri }
                 .any? { |x| x =~ /AllUsers|AuthenticatedUsers/ }
            mutex.synchronize { myPublicKeys << object.key }
          end
        rescue Aws::S3::Errors::PermanentRedirect => e
          Inspec::Log.warn "Permanent redirect for object #{object.key}: #{e.message}"
          skip_resource "Skipping object #{object.key} due to permanent redirect: #{e.message}"
        rescue => e
          Inspec::Log.warn "Error processing object #{object.key}: #{e.message}"
          Inspec::Log.warn "Backtrace: #{e.backtrace.join("\n")}"
          skip_resource "Skipping object #{object.key} due to error: #{e.message}"
        end
      end
    end

    # Ensure all tasks are completed before shutting down the pool
    pool.shutdown
    pool.wait_for_termination
  rescue Aws::S3::Errors::PermanentRedirect => e
    Inspec::Log.warn "Permanent redirect for bucket #{myBucket}: #{e.message}"
  rescue => e
    Inspec::Log.warn "Error accessing bucket #{myBucket}: #{e.message}"
    Inspec::Log.warn "Backtrace: #{e.backtrace.join("\n")}"
  ensure
    pool.shutdown if pool
  end

  myPublicKeys
end
